--- Monkey Patches for ui_inventory and utils_item
--- Author: Z30n_bh
--- Date: 08-06-2025

--------------------------------------------------------------------------------
--- AASS Init Intercept when starting Loot Mode, Enable AASS_MODE
--------------------------------------------------------------------------------

local snd_open         = sound_object([[interface\inv_open]])
local snd_close        = sound_object([[interface\inv_close]])

function ui_inventory.UIInventory:LMode_Init(obj)
	self:Print(nil, "LMode_Init | obj: %s", obj and obj:name())

	-- Enable AASS only when opening player created stashes
	if aass_main.is_aass_stash(obj:id()) then
		local box_id = obj:id()
		aass_main.aass_debug("AASS Stash found, Enabling AASS Mode...")
		aass_main.aass_update_working_stash(box_id)
		--aass_main.aass_generate_inventory(box_id)
		AASS_MODE = true
	end

	self.mode = "loot"
	
	-- Show/Hide needed elements
	self:Reset(obj)

	-- We need this because box can spawn items after opening, so they don't update those instantly
	if self.npc_is_box and (not self.box_init_update.state) then
		self.box_init_update.tg = time_global()
		self.box_init_update.state = true
		self:LMode_ResetInventories(true)
		return
	end
	self.box_init_update.state = false

	-- Update inventories
	self:LMode_ResetInventories()
	
	-- Update info
	self:UpdateInfo(true)
	
	-- Known info (Special case for corpses)
	self:LMode_TransferInfo(obj)
	
	-- Sound effect
	self:PlaySND(snd_open)
end

--------------------------------------------------------------------------------
--- Monkey Patching for ui_inventory.UIInventory:ParseInventory
--------------------------------------------------------------------------------

-- Saves the ParseInventory Function, to avoid conflict with other mods like, Looting Takes Time
local orig_ParseInventory = ui_inventory.UIInventory.ParseInventory
function ui_inventory.UIInventory:ParseInventory(npc, all, id_list, ignore_kind)

	if AASS_MODE then
		local inv = {}
		local size_c = 0
		local pkind = self.possible_kind
		local sec, kind, w, h
		local function iterate(owner,obj)
			sec = obj:section()
			kind = SYS_GetParam(0,sec,"kind") or "na"
			
			-- Parsing for kinds, according to sorter
			if ignore_kind or pkind["s_all"] or pkind[kind] then
				if id_list then
					inv[obj:id()] = obj
				else
					size_c = size_c + 1
					inv[size_c] = obj
				end
			end
		end

		if self:IsInvOwner(npc) then
			if all then
				npc:iterate_inventory(iterate,nil)
			else
				npc:iterate_ruck(iterate,nil)
			end
		elseif npc and self.npc_is_box then
			-- Here npc is an AASS stash box
			npc:iterate_inventory_box(iterate,nil) -- to get quest items stored as normal game objects

			aass_main.aass_debug("Generating AASS objects from table data...")
			local box_id = npc:id()
			aass_main.aass_generate_inventory(box_id) -- Update the inventory table
			size_c = 0

			-- Iterate through aass_inventory and parse
			for vid, aass_obj in pairs(aass_main.aass_inventory) do
				sec = aass_obj:section()
				kind = SYS_GetParam(0,sec,"kind") or "na"
					
				-- Parsing for kinds, according to sorter
				if ignore_kind or pkind["s_all"] or pkind[kind] then
					if id_list then
						inv[vid] = aass_obj
					else
						size_c = size_c + 1
						inv[size_c] = aass_obj
					end
				end
			end
		end
		
		return inv -- inv contains both game objects and AASSItem objects
	else
		return orig_ParseInventory(self, npc, all, id_list, ignore_kind)
	end
end

--------------------------------------------------------------------------------
--- UIInventory:Close() Patch, Store the game objects and disable AASS Mode
--------------------------------------------------------------------------------

function ui_inventory.UIInventory:Close()
	self:Print(nil, "Close")
	
	-- Sound effect
	self:PlaySND(snd_close)
	
	self:HideDialog()
	self:Show(false)
	
	ui_inventory.change_last_mode(0)

	-- Save all the items in AASS buffer and release the game objects
	if AASS_MODE then 
		aass_main.aass_debug("Disabling AASS Mode...")
		aass_main.aass_save_new_items()
		AASS_MODE = false 
	end

	Unregister_UI("UIInventory")
end

local orig_Action_Move = ui_inventory.UIInventory.Action_Move
function ui_inventory.UIInventory:Action_Move(obj, bag)
	obj = self:CheckItem(obj,"Action_Move")
	
	if AASS_MODE then
		local npc = self.npc_id and get_object_by_id(self.npc_id)
		if (not npc) then
			return
		end
		
		if (bag == "actor_bag") or (bag == "actor_equ") then
			-- Storing items into AASS Stash
			self:On_Item_Exchange(db.actor, npc, obj)
			aass_main.aass_update_stash_buffer(obj)
			SendScriptCallback("ActorMenu_on_item_after_move", self.npc_id, obj, self.mode, self.bag_id[bag])
		elseif (bag == "npc_bag") then
			-- Taking items from AASS Stash -- Special case if item still in buffer and not AASS Item
			if not aass_main.is_aass_item(obj,true) then
				self:On_Item_Exchange(npc, db.actor, obj)
				aass_main.aass_update_stash_buffer(obj)
				SendScriptCallback("ActorMenu_on_item_after_move", self.npc_id, obj, self.mode, self.bag_id[bag])
			else
				-- Transferring AASS Item from stash to Actor
				local box_id = self.npc_id
				local aass_obj = obj
				local new_obj_id = aass_main.aass_spawn_item_to_inventory(box_id,aass_obj) -- This returns a reference to the spawned obj
				--obj = get_object_by_id(new_obj_id.id)
				--obj = self:CheckItem(new_obj_id,"Action_Move")
				--aass_main.aass_debug("Return OBJ = %s, ID = %s", obj:section(),obj:id())
			end
		end

		self:On_Item_Update()
	else
		return orig_Action_Move(self, obj, bag)
	end
end



--- MonkeyPatch for level.object_by_id
--- I don't like this one but saves patching more than 7 other functions in ui_utils
--- Just a wrapper function for level.object_by_id

local orig_object_by_id = level.object_by_id
function level.object_by_id(id)
	if AASS_MODE and aass_main.is_aass_item(id,false) then
		return aass_main.aass_inventory[id]
	end

	return orig_object_by_id(id)
end

--- _G.alife_object monkeypatch, this is just a simple wrapper
local orig_alife_object = _G.alife_object
function _G.alife_object(id)
	if AASS_MODE and aass_main.is_aass_item(id,false) then
		return aass_main.aass_inventory[id]
	else
		return orig_alife_object(id)
	end
end