[[-- 
    Monkey Patches for ui_inventory and utils_item
    Author: Z30n_bh
    Date: 08-06-2025
--]]

--------------------------------------------------------------------------------
--- Compatiblity for Looting Takes Time
--------------------------------------------------------------------------------
function loot_searching_parse_inventory(self, npc, all, id_list, ignore_kind, inv)
	if not (self:IsInvOwner(npc) and npc:id() ~= AC_ID and self.mode == "loot" and all and id_list) then
		return inv
	end

	local res = dup_table(inv)
	local initial_inv = loot_searching.initial_inv
	local corpses = loot_searching.corpses

	-- corpses == (nil = timer for item does not exist, true = timer ticking, false = timer ended)
	local npc_id = npc:id()
	for item_id, item in pairs(res) do
		local item_timer = loot_searching.show_item_time(item_id)
		-- if item was in initial spawn and item isn't on timer
		if initial_inv[npc_id] and initial_inv[npc_id][item_id] and corpses[npc_id] then
			-- create timer if it does not exist
			if corpses[npc_id][item_id] == nil then
				corpses[npc_id][item_id] = true
				pr("~ id_list || Creating Time Event for npc_id: [ %s ] || itm_sec: [ %s ] || itm_id: [ %s ] || itm_tmr: [ %s ]", npc_id, item:section(), item_id, item_timer)
				CreateTimeEvent("item_hiding", "item_hiding_" .. npc_id .. "_" .. item_id, item_timer, show_item, npc_id, item_id)
			end
			-- and pass table without this item if timer didn't exist or still ticking (guess just true works)
			if corpses[npc_id][item_id] ~= false then
				res[item_id] = nil
			end
		end
	end

	return res
end


function ui_inventory.UIInventory:ParseInventory(npc, all, id_list, ignore_kind)
	local inv = {}
	local size_c = 0
	local pkind = self.possible_kind
	local sec, kind, w, h
	local function iterate(owner,obj)
		sec = obj:section()
		kind = SYS_GetParam(0,sec,"kind") or "na"
		
		-- Parsing for kinds, according to sorter
		if ignore_kind or pkind["s_all"] or pkind[kind] then
			if id_list then
				inv[obj:id()] = obj
			else
				size_c = size_c + 1
				inv[size_c] = obj
			end
		end
	end
	if self:IsInvOwner(npc) then
		if all then
			npc:iterate_inventory(iterate,nil)
		else
			npc:iterate_ruck(iterate,nil)
		end
	elseif npc and self.npc_is_box then
		-- i_quest items that are not added to the aass table
		npc:iterate_inventory_box(iterate,nil)

		-- AASS Intercept when opening player created stash
		local box_id = npc:id()
        if aass_main.is_aass(box_id) then
            local aass_stash_items = aass_main.generate_aass_items(box_id)
            table.insert(inv,aass_stash_items)
			return inv -- AASS Skips Loot Searching takes time for sanity reasons
		end
	end
	
	if loot_searching then
		return loot_searching_parse_inventory(self, npc, all, id_list, ignore_kind, inv)
	else
		return inv
	end
end


